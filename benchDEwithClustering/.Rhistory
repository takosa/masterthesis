new("TCC")
devtools::load_all()
new("TCC")
###
coldata <- data.frame(condition = group)
group <- gl(2,3)
group
###
coldata <- data.frame(condition = group)
coldata
library(benchDEwithClustering)
library(benchDEwithClustering)
devtools::document()
library(benchDEwithClustering)
matrix(rnbinom(10, 1, 0.5), 2, 5)
matrix(rnbinom(20, 1, 0.5), 5, 4)
x <- matrix(rnbinom(20, 1, 0.5), 5, 4)
edgeR::calcNormFactors(x)
x <- matrix(rnbinom(20, 10, 0.5), 5, 4)
edgeR::calcNormFactors(x)
str(edgeR::calcNormFactors(x))
DESeq2::estimateSizeFactors(x)
x
g <- gl(2, 2)
devtools::load_all(".")
get_sizefactors(x, g)
get_sizefactors(x, g, "rle")
get_sizefactors(x, g, "mrn")
tcc <- TCC::simulateReadCounts()
data(arab, package = "TCC")
tcc <- TCC::simulateReadCounts()
get_sizefactors(tcc$count, tcc$group$group, "mrn")
get_sizefactors(tcc$count, as.integer(tcc$group$group), "mrn")
get_sizefactors(tcc$count, as.integer(tcc$group$group), "eee")
DESeq2::estimateSizeFactorsForMatrix(x)
get_sizefactors(x, g, "rle")
devtools::load_all(".")
get_sizefactors(x, g, "rle")
round(get_sizefactors(x, g, "rle"), 5)
tcc$count
devtools::load_all(".")
get_sizefactors(tcc$count, tcc$group$group, 1)
get_sizefactors(tcc$count, tcc$group$group, "tmm")
sapply(c("tmm", "rle", "mrn", "eee"), function(x) get_sizefactors(tcc$count, tcc$group$group, x))
x <- sapply(c("tmm", "rle", "mrn", "eee"), function(x) get_sizefactors(tcc$count, tcc$group$group, x))
plot(x)
plot(as.data.frame(x))
x <- as.data.frame(x)
x$libsizes <- colSums(tcc$count)
x
reg <- lapply(names(x)[-5], function(v) lm(I(v)~libsizes, data = x))
reg <- lapply(names(x)[-5], function(v) lm(v~libsizes, data = x))
reg <- lapply(names(x)[-5], function(v) lm(eval(v)~libsizes, data = x))
reg <- lapply(names(x)[-5], function(v) lm(as.symbol(v)~libsizes, data = x))
x
reg <- lapply(names(x)[-5], function(v) lm(tmm~libsizes, data = x))
names(x)[-5]
reg <- lapply(names(x)[-5], function(v) lm(rlang::as_name(v)~libsizes, data = x))
reg <- lapply(names(x)[-5], function(v) lm(rlang::as_name(eval(v))~libsizes, data = x))
reg <- lapply(names(x)[-5], function(v) v~libsize)
reg
reg <- lapply(names(x)[-5], function(v) v~libsizes)
reg <- lapply(names(x)[-5], function(v) {
enquote(v)
v~libsizes
})
reg
reg <- lapply(names(x)[-5], function(v) {
enquote(v)
eval(v)~libsizes
})
reg
reg <- lapply(names(x)[-5], function(v) {
enquote(v)
as.name(eval(v))~libsizes
})
reg
reg <- lapply(names(x)[-5], function(v) {
enquote(v)
as.name(v)~libsizes
})
x
reg
reg <- lapply(names(x)[-5], function(v) {
print(v)
as.name(v)~libsizes
})
reg
reg <- lapply(names(x)[-5], function(v) {
eval(v)
as.name(v)~libsizes
})
reg
reg <- lapply(names(x)[-5], function(v) {
eval(v)
as.name(v)~libsizes
v})
reg
reg <- lapply(names(x)[-5], function(v) {
eval(v)
as.name(I(v))~libsizes
})
reg
reg <- lapply(names(x)[-5], function(v) {
eval(v)
as.name(I(eval(v)))~libsizes
})
reg
reg <- lapply(names(x)[-5], function(v) {
eval(v)
I(v)~libsizes
})
x
reg
reg <- lapply(names(x)[-5], function(v) {
eval(v)
#I(v)~libsizes
})
reg
reg <- lapply(names(x)[-5], function(v) {
lm(as.formula(paste0(v, "~libsizes"), data = x)
})
reg <- lapply(names(x)[-5], function(v) {
lm(as.formula(paste0(v, "~libsizes")), data = x)
})
reg
abline(reg[[1]])
par(mar=c(5.6,6.1,1.1,1.1),mgp=c(4,1.5,0))
matplot(N,cbind(f1,f2,f3),type="n",cex.axis=2,cex.lab=2,xlab="Library size (in millions)",ylab="Normalization factor",xaxt="n",yaxt="n")
par(mar=c(5.6,6.1,1.1,1.1),mgp=c(4,1.5,0))
matplot(x$libsizes,as.matrix(x[1:4]),type="n",cex.axis=2,cex.lab=2,xlab="Library size (in millions)",ylab="Normalization factor",xaxt="n",yaxt="n")
axis(1,at=13:20*10^6,labels=c(13,14,15,16,17,18,19,20),cex.axis=2)
axis(2,at=seq(0.75,1.35,0.1),labels=seq(0.75,1.35,0.1),cex.axis=2)
abline(reg[[1]],col="blue",lwd=4,lty=2)
abline(reg[[2]],col="red",lwd=4,lty=2)
abline(reg[[3]],col="green",lwd=4,lty=2)
abline(reg[[4]],col="orange",lwd=4,lty=2)
x
get_sizefactors(counts = tcc$count, group = gl(3,2), "mrn")
get_sizefactors(counts = tcc$count, group = gl(2,3), "mrn")
?par
x <- data.frame(id = c("a", "b", "c", "d", "e"), x = 1:5, stringsAsFactors = F)
x <- data.frame(id = c("a", "b", "e"), x = 3:5, stringsAsFactors = F)
x <- data.frame(id = c("a", "b", "c", "d", "e"), x = 1:5, stringsAsFactors = F)
y <- data.frame(id = c("a", "b", "e"), x = 3:5, stringsAsFactors = F)
x
y
dplyr::inner_join(x, y)
dplyr::inner_join(x, y, id)
dplyr::inner_join(x, y, "id")
y <- data.frame(id = c("a", "b", "e"), y = 3:5, stringsAsFactors = F)
dplyr::inner_join(x, y, "id")
x
y
dplyr::inner_join(x, y, "id")
dplyr::full_join(x, y, "id")
dplyr::left_join(x, y, "id")
dplyr::right_join(x, y, "id")
dplyr::right_join(x, y, c(x = "y"))
dplyr::right_join(x, y, c(y = "x"))
dplyr::full_join(x, y, c(y = "x"))
dplyr::full_join(y, x, c(y = "x"))
