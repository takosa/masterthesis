load("~/working/Bilab/master_research/mbcluster/self_consistensy/result.RData")
res <- lapply(seq_along(all_trainings), function(i) {
tra <- all_trainings[[i]]
val <- all_validations[[i]]
method <- names(all_trainings)[i]
res_sub <- lapply(seq_along(tra), function(j) {
t <- tra[[j]]
v <- val[[j]]
tp <- sum(t$qval <= 0.05 & v$qval <= 0.05)
fp <- sum(t$qval <= 0.05 & v$qval > 0.05)
tn <- sum(t$qval > 0.05 & v$qval > 0.05)
fn <- sum(t$qval > 0.05 & v$qval <= 0.05)
fdr <- fp / (tp + fp)
sp <- cor(t$pval, v$pval, method = "spearman")
return(list(method = method, tp = tp, fp = fp, tn = tn, fn = fn, fdr = fdr, sp = sp))
})
dplyr::bind_rows(res_sub)
})
res <- dplyr::bind_rows(res)
library(ggplot2)
library(tidyr)
res %>% gather("metric", "value", -method, -tp, -fp, -tn, -fn) %>%
ggplot(aes(method, value, col = method)) + geom_boxplot() +
facet_grid(rows = vars(metric), scales = "free_y")
load("~/working/Bilab/master_research/mbcluster/self_consistensy/result.RData")
ls()
str(all_trainings)
res <- lapply(seq_along(all_trainings), function(i) {
tra <- all_trainings[[i]]
val <- all_validations[[i]]
method <- names(all_trainings)[i]
res_sub <- lapply(seq_along(tra), function(j) {
t <- tra[[j]]
v <- val[[j]]
tp <- sum(t$qval <= 0.05 & v$qval <= 0.05)
fp <- sum(t$qval <= 0.05 & v$qval > 0.05)
tn <- sum(t$qval > 0.05 & v$qval > 0.05)
fn <- sum(t$qval > 0.05 & v$qval <= 0.05)
fdr <- fp / (tp + fp)
sp <- cor(t$pval, v$pval, method = "spearman")
return(list(method = method, tp = tp, fp = fp, tn = tn, fn = fn, fdr = fdr, sp = sp))
})
dplyr::bind_rows(res_sub)
})
res <- dplyr::bind_rows(res)
library(ggplot2)
library(tidyr)
res %>% gather("metric", "value", -method, -tp, -fp, -tn, -fn) %>%
ggplot(aes(method, value, col = method)) + geom_boxplot() +
facet_grid(rows = vars(metric), scales = "free_y")
res <- lapply(seq_along(all_trainings), function(i) {
tra <- all_trainings[[i]]
val <- all_validations[[i]]
method <- names(all_trainings)[i]
res_sub <- lapply(seq_along(tra), function(j) {
t <- tra[[j]]
v <- val[[j]]
tp <- sum(t$qval <= 0.05 & v$qval <= 0.05)
fp <- sum(t$qval <= 0.05 & v$qval > 0.05)
tn <- sum(t$qval > 0.05 & v$qval > 0.05)
fn <- sum(t$qval > 0.05 & v$qval <= 0.05)
fdr <- fp / (tp + fp)
sp <- cor(t$pval[1:2000], v$pval[1:2000], method = "spearman")
return(list(method = method, tp = tp, fp = fp, tn = tn, fn = fn, fdr = fdr, sp = sp))
})
dplyr::bind_rows(res_sub)
})
res <- dplyr::bind_rows(res)
library(ggplot2)
library(tidyr)
res %>% gather("metric", "value", -method, -tp, -fp, -tn, -fn) %>%
ggplot(aes(method, value, col = method)) + geom_boxplot() +
facet_grid(rows = vars(metric), scales = "free_y")
res <- lapply(seq_along(all_trainings), function(i) {
tra <- all_trainings[[i]]
val <- all_validations[[i]]
method <- names(all_trainings)[i]
res_sub <- lapply(seq_along(tra), function(j) {
t <- tra[[j]]
v <- val[[j]]
tp <- sum(t$qval <= 0.05 & v$qval <= 0.05)
fp <- sum(t$qval <= 0.05 & v$qval >  0.05)
tn <- sum(t$qval >  0.05 & v$qval >  0.05)
fn <- sum(t$qval >  0.05 & v$qval <= 0.05)
fdr <- fp / (tp + fp)
tp <- sum(rank(t$qval) <= 2000 & rank(v$qval) <= 2000)
fp <- sum(rank(t$qval) <= 2000 & rank(v$qval) >  2000)
tn <- sum(rank(t$qval) >  2000 & rank(v$qval) >  2000)
fn <- sum(rank(t$qval) >  2000 & rank(v$qval) <= 2000)
fdr <- fp / (tp + fp)
sp <- cor(sort(t$pval)[1:2000], sort(v$pval)[1:2000], method = "spearman")
return(list(method = method, tp = tp, fp = fp, tn = tn, fn = fn, fdr = fdr, sp = sp))
})
dplyr::bind_rows(res_sub)
})
res <- dplyr::bind_rows(res)
library(ggplot2)
library(tidyr)
res <- lapply(seq_along(all_trainings), function(i) {
tra <- all_trainings[[i]]
val <- all_validations[[i]]
method <- names(all_trainings)[i]
res_sub <- lapply(seq_along(tra), function(j) {
t <- tra[[j]]
v <- val[[j]]
tp <- sum(t$qval <= 0.05 & v$qval <= 0.05)
fp <- sum(t$qval <= 0.05 & v$qval >  0.05)
tn <- sum(t$qval >  0.05 & v$qval >  0.05)
fn <- sum(t$qval >  0.05 & v$qval <= 0.05)
fdr <- fp / (tp + fp)
tp <- sum(rank(t$qval) <= 2000 & rank(v$qval) <= 2000)
fp <- sum(rank(t$qval) <= 2000 & rank(v$qval) >  2000)
tn <- sum(rank(t$qval) >  2000 & rank(v$qval) >  2000)
fn <- sum(rank(t$qval) >  2000 & rank(v$qval) <= 2000)
fdr2 <- fp / (tp + fp)
sp <- cor(sort(t$pval)[1:2000], sort(v$pval)[1:2000], method = "spearman")
return(list(method = method, tp = tp, fp = fp, tn = tn, fn = fn, fdr = fdr, fdr2 = fdr2, sp = sp))
})
dplyr::bind_rows(res_sub)
})
res <- dplyr::bind_rows(res)
library(ggplot2)
library(tidyr)
res %>% gather("metric", "value", -method, -tp, -fp, -tn, -fn) %>%
ggplot(aes(method, value, col = method)) + geom_boxplot() +
facet_grid(rows = vars(metric), scales = "free_y")
ggsave("self_consistensy/figure.png", width = 9.6, height = 9.6)
ggsave("self_consistensy/figure.png", width = 4.8, height = 4.8)
ggsave("self_consistensy/figure.png", width = 4.8, height = 4.8 * 1.5)
ggsave("self_consistensy/figure.png", width = 4.8 * 1.5, height = 4.8 * 1.2)
sp
cor
?cor
load("~/working/Bilab/master_research/mbcluster/self_consistensy/result.RData")
res <- lapply(seq_along(all_trainings), function(i) {
tra <- all_trainings[[i]]
val <- all_validations[[i]]
method <- names(all_trainings)[i]
res_sub <- lapply(seq_along(tra), function(j) {
t <- tra[[j]]
v <- val[[j]]
tp <- sum(t$qval <= 0.05 & v$qval <= 0.05)
fp <- sum(t$qval <= 0.05 & v$qval >  0.05)
tn <- sum(t$qval >  0.05 & v$qval >  0.05)
fn <- sum(t$qval >  0.05 & v$qval <= 0.05)
fdr <- fp / (tp + fp)
tp <- sum(rank(t$qval) <= 2000 & rank(v$qval) <= 2000)
fp <- sum(rank(t$qval) <= 2000 & rank(v$qval) >  2000)
tn <- sum(rank(t$qval) >  2000 & rank(v$qval) >  2000)
fn <- sum(rank(t$qval) >  2000 & rank(v$qval) <= 2000)
fdr2 <- fp / (tp + fp)
sp1 <- cor(sort(t$pval), sort(v$pval), method = "spearman")
sp2 <- cor(sort(t$pval)[1:2000], sort(v$pval)[1:2000], method = "spearman")
return(list(method = method, tp = tp, fp = fp, tn = tn, fn = fn, fdr = fdr, fdr2 = fdr2, sp1 = sp1, sp2 = sp2))
})
dplyr::bind_rows(res_sub)
})
res <- dplyr::bind_rows(res)
library(ggplot2)
library(tidyr)
res %>% gather("metric", "value", -method, -tp, -fp, -tn, -fn) %>%
ggplot(aes(method, value, col = method)) + geom_boxplot() +
facet_grid(rows = vars(metric), scales = "free_y")
kmeans
x <- NULL
data(arab, package = TCC)
tcc <- TCC::simulateReadCounts()
rm(arab)
data(arab, package = TCC)
data(arab, package = "TCC")
tcc <- TCC::simulateReadCounts()
rm(arab)
setwd("~/working/Bilab/master_research/mbcluster/honban")
devtools::load_all("package")
setwd("~/working/Bilab/master_research/mbcluster/honban")
## if run this script directly without snakemake
output <- list("out/out.rds")
p <- list(nsim = 2,
ngene = 10000,
pdeg = 0.05,
assign = c(1/3, 1/3, 1/3),
foldchange = c(4, 4, 4),
replicates = c(3, 3, 3),
group = NULL,
fcmatrix = NULL)
threads <- 2
log <- list()
if (length(log) > 0) {
if (!dir.exists(dname <- dirname(log[[1]])))
dir.create(dname, recursive = TURE)
if (length(log) == 2) {
zz1 <- file(log[[1]], open = "wt")
sink(zz1)
zz1 <- file(log[[2]], open = "wt")
sink(zz1, type = "message")
} else{
zz <- file(log[[1]], open = "wt")
sink(zz)
sink(zz, type = "message")
}
}
options(mc.cores = threads)
library(parallel)
devtools::load_all("benchDEwithClustering")
data(arab, package = "TCC")
all_result <- mclapply(seq_len(p$nsim), function(s) {
set.seed(s)
tcc <- TCC::simulateReadCounts(Ngene = p$ngene,
PDEG = p$pdeg,
DEG.assign = p$assign,
DEG.foldchange = p$foldchange,
replicates = p$replicates,
group = p$group,
fc.matrix = p$fcmatrix)
result <- list()
# MBCluster.Seq
cat("start MBCluster.Seq\n")
result$mbcluster <- run_mbcluster(counts = tcc$count, group = tcc$group$group, k = 3)
# edgeR
cat("start edgeR\n")
result$edger <- run_edegr(counts = tcc$count, group = tcc$group$group, coef = 2)
# DESeq2
cat("start DESeq2\n")
result$deseq2 <- run_deseq2(counts = tcc$count, group = tcc$group$group, test = "LRT", reduced = ~1)
# TCC
cat("start TCC\n")
result$tcc <- run_tcc(counts = tcc$count, group = tcc$group$group, X = "tmm", Y = "edger", Z = "edger", iter = 3)
# DREAMSeq
cat("start DREAMSeq\n")
result$dreamseq <- run_dreamseq(counts = tcc$count, group = tcc$group$group)
result
})
threads <- 1
length(log)
log(1)
log(1.5)
options(mc.cores = threads)
all_result <- mclapply(seq_len(p$nsim), function(s) {
set.seed(s)
tcc <- TCC::simulateReadCounts(Ngene = p$ngene,
PDEG = p$pdeg,
DEG.assign = p$assign,
DEG.foldchange = p$foldchange,
replicates = p$replicates,
group = p$group,
fc.matrix = p$fcmatrix)
result <- list()
# MBCluster.Seq
cat("start MBCluster.Seq\n")
result$mbcluster <- run_mbcluster(counts = tcc$count, group = tcc$group$group, k = 3)
# edgeR
cat("start edgeR\n")
result$edger <- run_edegr(counts = tcc$count, group = tcc$group$group, coef = 2)
# DESeq2
cat("start DESeq2\n")
result$deseq2 <- run_deseq2(counts = tcc$count, group = tcc$group$group, test = "LRT", reduced = ~1)
# TCC
cat("start TCC\n")
result$tcc <- run_tcc(counts = tcc$count, group = tcc$group$group, X = "tmm", Y = "edger", Z = "edger", iter = 3)
# DREAMSeq
cat("start DREAMSeq\n")
result$dreamseq <- run_dreamseq(counts = tcc$count, group = tcc$group$group)
result
})
all_result <- mclapply(seq_len(p$nsim), function(s) {
set.seed(s)
tcc <- TCC::simulateReadCounts(Ngene = p$ngene,
PDEG = p$pdeg,
DEG.assign = p$assign,
DEG.foldchange = p$foldchange,
replicates = p$replicates,
group = p$group,
fc.matrix = p$fcmatrix)
result <- list()
## MBCluster.Seq
#cat("start MBCluster.Seq\n")
#result$mbcluster <- run_mbcluster(counts = tcc$count, group = tcc$group$group, k = 3)
## edgeR
#cat("start edgeR\n")
#result$edger <- run_edegr(counts = tcc$count, group = tcc$group$group, coef = 2)
## DESeq2
#cat("start DESeq2\n")
#result$deseq2 <- run_deseq2(counts = tcc$count, group = tcc$group$group, test = "LRT", reduced = ~1)
## TCC
#cat("start TCC\n")
#result$tcc <- run_tcc(counts = tcc$count, group = tcc$group$group, X = "tmm", Y = "edger", Z = "edger", iter = 3)
# DREAMSeq
cat("start DREAMSeq\n")
result$dreamseq <- run_dreamseq(counts = tcc$count, group = tcc$group$group)
result
})
tcc <- TCC::simulateReadCounts(Ngene = p$ngene,
PDEG = p$pdeg,
DEG.assign = p$assign,
DEG.foldchange = p$foldchange,
replicates = p$replicates,
group = p$group,
fc.matrix = p$fcmatrix)
result$dreamseq <- run_dreamseq(counts = tcc$count, group = tcc$group$group)
devtools::load_all("benchDEwithClustering")
result$dreamseq <- run_dreamseq(counts = tcc$count, group = tcc$group$group)
counts <- tcc$count
group <- tcc$group$group
cnt <- DREAMSeq::DEGCountSet(counts, group)
cnt <- DREAMSeq::DREAMSeq(cnt, model = "DP", parallel = F)
res <- DREAMSeq::exResult(cnt)
###
cnt <- DREAMSeq::DEGCountSet(counts, group)
cnt <- DREAMSeq::DREAMSeq(cnt, model = "DP", parallel = F)
cnt <- DREAMSeq::DREAMSeq(cnt, model = "DP", parallel = F, fc = 1)
cnt
cnt <- DREAMSeq::DREAMSeq(cnt, model = "DP")
tcc <- TCC::simulateReadCounts()
counts <- tcc$count
cnt <- DREAMSeq::DEGCountSet(counts, group)
head(counts)
cnt <- DREAMSeq::DEGCountSet(counts, gl(2,3))
cnt <- DREAMSeq::DREAMSeq(cnt, model = "DP")
cnt <- DREAMSeq::DEGCountSet(counts, gl(3,2))
cnt <- DREAMSeq::DREAMSeq(cnt, model = "DP")
DREAMSeq::exModel(cnt)
cnt <- DREAMSeq::DEGCountSet(counts, gl(2,3))
DREAMSeq::exModel(cnt)
cnt <- DREAMSeq::DREAMSeq(cnt, model = "DP")
